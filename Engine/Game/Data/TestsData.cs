// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#pragma warning disable 0219
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using UnityEngine;

using Engine.Data.Json;

public class DataKeyedObjectLeaf : DataKeyedObject {

    public string otherProperty = "";
}

public class TestsData {

    public static void Advance(string name) {
        Debug.Log(name + "\r\n----------------------------------\r\n\r\n");
    }

    public static void RunTest() {

        Advance("Running tests...");

        bool success = false;
        string testName = "";

        
        ContentsConfig.contentRootFolder = TestConfigs.contentRootFolder;
        ContentsConfig.contentAppFolder = TestConfigs.contentAppFolder;
        ContentsConfig.contentDefaultPackFolder = TestConfigs.contentDefaultPackFolder;
        ContentsConfig.contentVersion = TestConfigs.contentVersion;
        ContentsConfig.contentIncrement = TestConfigs.contentIncrement;
        
        Advance("Creating Contents cache paths");
        ContentPaths.CreateCachePaths();
        
        Advance("Loading Profile");
        GameState.LoadProfile();

        //Advance("TestGameCharacterSkin");
        //TestGameCharacterSkin();

        //Advance("TestGameCharacterSkinLoadData");
        //TestGameCharacterSkinLoadData();
        
        //Advance("TestGameState_LoadProfile");
        //TestGameState_LoadProfile();
        
        //Advance("TestGameState_SaveProfile");
        //TestGameState_SaveProfile();

        //Advance("TestGameProfileCharacter_GetCharacter");
        //TestGameProfileCharacter_GetCharacter();
        
        //Advance("TestGameProfileCharacter_GetCurrentCharacter");
        //TestGameProfileCharacter_GetCurrentCharacter();
        
        //Advance("TestGameProfileCharacter_currentCharacter");
        //TestGameProfileCharacter_currentCharacter();
                
        //Advance("TestGameProfileCharacter_currentProgress");
        //TestGameProfileCharacter_currentProgress();

        //testName = "TestGameProfileCharacter_currentCustom";
        //Advance(testName);
        //success = TestGameProfileCharacter_currentCustom(testName);
        
        //if(!CheckTest(success, testName)) { 
        //    return;
        //}
        
        //Advance("TestAppColors_List");
        //TestAppColors_List();
        
        //Advance("TestAppColors_Code");
        //TestAppColors_Code();
        
        //Advance("TestAppContentAssetModels_List");
        //TestAppContentAssetModels_List();
        
        //Advance("TestAppContentAssetModels_Load");
        //TestAppContentAssetModels_Load();
                
        //("TestAppContentAssetCustomItems_List");
        //TestAppContentAssetCustomItems_List();
        
        //Advance("TestAppAssetTextures_List");
        //TestAppAssetTextures_List();

        //testName = "TestAppAssetTexturePresets_List";
        //Advance(testName);
        //success = TestAppAssetTexturePresets_List(testName);

        //if(!CheckTest(success, testName)) { 
        //    return;
        //}
                
        //Advance("TestAppColorPresets_List");
        //success = TestAppColorPresets_List();
        
        //Advance("TestGameCharacters_List");
        //TestGameCharacters_List();
                
        //Advance("TestGameCharacters_Load");
        //TestGameCharacters_Load();

        //testName = "TestGameWeapons_List";
        //Advance(testName);
        //success = TestGameWeapons_List(testName);
        
        //testName = "TestGameItems_List";
        //Advance(testName);
        //success = TestGameItems_List(testName);
                
        //testName = "TestGameTeams_List";
        //Advance(testName);
        //success = TestGameTeams_List(testName);
        
        //testName = "TestGameItemPresets_List";
        //Advance(testName);
        //success = TestGameItemPresets_List(testName);
        
        //testName = "TestGameTerrainPresets_List";
        //Advance(testName);
        //success = TestGameTerrainPresets_List(testName);
                
        //testName = "TestGamePresets_List";
        //Advance(testName);
        //success = TestGamePresets_List(testName);
                
        testName = "TestGameAchievements_List";
        Advance(testName);
        success = TestGameAchievements_List(testName);
                
        //testName = "TestGameLeaderboards_List";
        //Advance(testName);
        //success = TestGameLeaderboards_List(testName);

        //
        
        if(!CheckTest(success, testName)) { 
            return;
        }
        if(success) {
            Debug.Log("TESTS SUCCESSFUL");
        }
        else {
            Debug.LogError("TESTS WERE IN ERROR!");
        }
        
        Debug.Log("TESTS COMPLETED");
    }

    public static bool CheckTest(bool success, string name) {
        if(!success) {            
            Debug.LogError("TESTS WERE IN ERROR! " + name);
            return success;
        }
        return success;
    }

    public static void DumpObj(string name, string oname, object o) {        
        Debug.Log(string.Format("{0} : {1}  : {2} ", name, oname, o));
    }

    public static bool AssertEquals(string name, object a, object b) {
        string dataA = a.ToJson();
        string dataB = b.ToJson();
        bool equal = false;
        if(dataA == dataB) {            
            equal = true;
            Debug.Log(name + ": SUCCESS :" + equal);
        }
        else {       
            Debug.LogError(name + ": FAIL :" + equal);
        }

        DumpObj(name, "dataA", dataA);
        DumpObj(name, "dataB", dataB);

        return equal;
    }
    public static bool TestGameLeaderboards_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameLeaderboard> items = GameLeaderboards.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameLeaderboard item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameLeaderboardData data = item.data;
            
            if(data != null) {
                
                foreach(GameNetworkData dataItem in data.networks) {          
                    Debug.Log("dataItem:code:" + dataItem.code);         
                    Debug.Log("dataItem:json:" + dataItem.ToJson());
                    success = true;                    
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGameAchievements_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameAchievement> items = GameAchievements.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameAchievement item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameAchievementData data = item.data;
            
            if(data != null) {
                
                foreach(GameNetworkData dataItem in data.networks) {          
                    Debug.Log("dataItem:code:" + dataItem.code);         
                    Debug.Log("dataItem:json:" + dataItem.ToJson());
                    success = true;                    
                }
                                
                foreach(GameFilter dataItem in data.filters) {          
                    Debug.Log("dataItem:type:" + dataItem.type);            
                    Debug.Log("dataItem:data:" + dataItem.data);       
                    Debug.Log("dataItem:json:" + dataItem.ToJson());

                    success = true;                    
                }
            }

            List<GameFilterBase> statisticSingles = item.GetFilterStatisticSingle();        
            Debug.Log("item:statisticSingles:" + statisticSingles);
                        
            List<GameFilterBase> statisticAll = item.GetFilterStatisticAll();        
            Debug.Log("item:statisticAll:" + statisticAll);
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGamePresets_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GamePreset> items = GamePresets.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GamePreset item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GamePresetItems data = item.data;
            
            if(data != null) {
                
                foreach(GamePresetItem preset in data.items) {          
                    Debug.Log("preset:code:" + preset.code);         
                    Debug.Log("preset:json:" + preset.ToJson());
                    success = true;                    
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGameTerrainPresets_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GamePreset> items = GamePresets.Instance.GetListByType("terrain");
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GamePreset item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GamePresetItems data = item.data;
            
            if(data != null) {
                
                foreach(GamePresetItem preset in data.items) {          
                    Debug.Log("preset:code:" + preset.code);         
                    Debug.Log("preset:json:" + preset.ToJson());
                    success = true;                    
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }

    public static bool TestGameItemPresets_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameItemPreset> items = GameItemPresets.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameItemPreset item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameItemPresetItems data = item.data;

            if(data != null) {

                foreach(GameItemPresetItem preset in data.items) {          
                    Debug.Log("preset:code:" + preset.code);         
                    Debug.Log("preset:json:" + preset.ToJson());
                    success = true;                    
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGameItems_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameItem> items = GameItems.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameItem item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameDataObjectItem data = item.data;
            
            if(data != null) {
                foreach(GameDataModel dataItem in data.models) {                    
                    Debug.Log("dataItem:models:code:" + dataItem.code);
                    success = true;
                }
                
                foreach(string dataItem in data.roles) {                    
                    Debug.Log("dataItem:roles:code:" + dataItem);
                    success = true;
                }
                
                foreach(GameDataItemRPG dataItem in data.rpgs) {                    
                    Debug.Log("dataItem:rpgs:code:" + dataItem.code);        
                    Debug.Log("dataItem:rpgs:attack:" + dataItem.attack);
                    Debug.Log("dataItem:rpgs:attack:" + dataItem.attack_speed);
                    Debug.Log("dataItem:rpgs:boost:" + dataItem.boost);
                    Debug.Log("dataItem:rpgs:energy:" + dataItem.energy);
                    Debug.Log("dataItem:rpgs:fly:" + dataItem.fly);
                    Debug.Log("dataItem:rpgs:health:" + dataItem.health);
                    Debug.Log("dataItem:rpgs:jump:" + dataItem.jump);
                    Debug.Log("dataItem:rpgs:level:" + dataItem.level);
                    Debug.Log("dataItem:rpgs:recharge_speed:" + dataItem.recharge_speed);
                    Debug.Log("dataItem:rpgs:speed:" + dataItem.speed);
                    Debug.Log("dataItem:rpgs:upgrades:" + dataItem.upgrades);
                    Debug.Log("dataItem:rpgs:xp:" + dataItem.upgrades_applied);
                    Debug.Log("dataItem:rpgs:xp:" + dataItem.xp);
                    success = true;
                }                
                
                foreach(GameDataItemReward dataItem in data.rewards) {                    
                    Debug.Log("dataItem:rewards:code:" + dataItem.ToJson());
                    success = true;
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGameWeapons_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameWeapon> items = GameWeapons.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameWeapon item in items) {  
            
            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameDataObjectItem data = item.data;
            
            if(data != null) {
                foreach(GameDataModel dataItem in data.models) {                    
                    Debug.Log("dataItem:models:code:" + dataItem.code);
                    success = true;
                }
                
                foreach(string dataItem in data.roles) {                    
                    Debug.Log("dataItem:roles:code:" + dataItem);
                    success = true;
                }
                
                foreach(GameDataItemRPG dataItem in data.rpgs) {                    
                    Debug.Log("dataItem:rpgs:code:" + dataItem.code);        
                    Debug.Log("dataItem:rpgs:attack:" + dataItem.attack);
                    Debug.Log("dataItem:rpgs:attack:" + dataItem.attack_speed);
                    Debug.Log("dataItem:rpgs:boost:" + dataItem.boost);
                    Debug.Log("dataItem:rpgs:energy:" + dataItem.energy);
                    Debug.Log("dataItem:rpgs:fly:" + dataItem.fly);
                    Debug.Log("dataItem:rpgs:health:" + dataItem.health);
                    Debug.Log("dataItem:rpgs:jump:" + dataItem.jump);
                    Debug.Log("dataItem:rpgs:level:" + dataItem.level);
                    Debug.Log("dataItem:rpgs:recharge_speed:" + dataItem.recharge_speed);
                    Debug.Log("dataItem:rpgs:speed:" + dataItem.speed);
                    Debug.Log("dataItem:rpgs:upgrades:" + dataItem.upgrades);
                    Debug.Log("dataItem:rpgs:xp:" + dataItem.upgrades_applied);
                    Debug.Log("dataItem:rpgs:xp:" + dataItem.xp);
                    success = true;
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
    
    public static bool TestGameTeams_List(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        List<GameTeam> items = GameTeams.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameTeam item in items) {  

            Debug.Log("item:code:" + item.code);               
            Debug.Log("item:json:" + item.ToJson());  
            
            GameDataObjectItem data = item.data;
            
            if(data != null) {
                foreach(GameDataModel dataItem in data.models) {                    
                    Debug.Log("dataItem:models:code:" + dataItem.code);
                    success = true;
                }
                
                foreach(GameDataColorPreset dataItem in data.color_presets) {                    
                    Debug.Log("dataItem:color_presets:code:" + dataItem.code);
                    success = true;
                }
                
                foreach(GameDataTexturePreset dataItem in data.texture_presets) {                    
                    Debug.Log("dataItem:texture_presets:code:" + dataItem.code);
                    success = true;
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
        
        return success;
    }
        
    public static bool TestGameProfileCharacter_currentCustom(string name) {
        
        bool success = false;
        
        Debug.Log(name);
        
        //string characterCode = "default";
        
        GameProfileCustomItem customItem = GameProfileCharacters.currentCustom;
        
        
        if(customItem == null) {
            
            DumpObj(name, "customItem:NULL", customItem);
        }
        else {

            success = true;

            DumpObj(name, "customItem:EXISTS", customItem);
            
            DumpObj(name, "customItem:attributes", customItem.attributes.ToJson());
            DumpObj(name, "customItem:current_color_preset", customItem.current_color_preset);
            DumpObj(name, "customItem:current_texture_preset", customItem.current_texture_preset);
        }
        
        DumpObj(name, "customItem", customItem);
        
        return success;
    }
    
    public static bool TestAppAssetTextures_List(string name) {
        
        bool success = false;

        Debug.Log(name);
        
        List<AppContentAssetTexture> items = AppContentAssetTextures.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetTexture item in items) {  
            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:type:" + item.type);
            
            Debug.Log("item:json:" + item.ToJson());  
            
            Dictionary<string, string> data = item.data;
            
            if(data != null) {
                foreach(KeyValuePair<string, string> pair in data) {                    
                    Debug.Log("pair:Key:" + pair.Key);
                    Debug.Log("pair:Value:" + pair.Value);    
                    success = true;
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);

        return success;
    }
        
    public static bool TestAppAssetTexturePresets_List(string name) {

        bool success = false;

        Debug.Log(name);
        
        List<AppContentAssetTexturePreset> items = AppContentAssetTexturePresets.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetTexturePreset item in items) {  
            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:type:" + item.type);
            
            Debug.Log("item:json:" + item.ToJson());  
            
            Dictionary<string, string> data = item.data;
            
            if(data != null) {
                foreach(KeyValuePair<string, string> pair in data) {                    
                    Debug.Log("pair:Key:" + pair.Key);
                    Debug.Log("pair:Value:" + pair.Value);
                    success = true;
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);

        return success;
    }

        
    public static bool TestAppColorPresets_List() {
        
        string name = "TestAppColorPresets_List";

        bool success = false;
        
        Debug.Log(name);
        
        List<AppColorPreset> items = AppColorPresets.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppColorPreset item in items) {  
            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:type:" + item.type);
            
            Debug.Log("item:json:" + item.ToJson());  
            
            Dictionary<string, string> data = item.data;
            
            if(data != null) {
                foreach(KeyValuePair<string, string> pair in data) { 
                    success = true;
                    Debug.Log("pair:Key:" + pair.Key);
                    Debug.Log("pair:Value:" + pair.Value);                    
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);

        return success;
    }

    
    public static void TestGameCharacters_List() {
        
        string name = "TestGameCharacters_List";
        
        Debug.Log(name);
        
        List<GameCharacter> items = GameCharacters.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(GameCharacter item in items) {  
            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:type:" + item.type);

            Debug.Log("item:json:" + item.ToJson());  

            GameDataCharacter data = item.data;

            if(data != null) {
                foreach(GameDataModel model in data.models) {
                    string modelCode = model.code;
                    
                    Debug.Log("model:code:" + model.code);
                    Debug.Log("model:type:" + model.type);
                    Debug.Log("model:textures:" + model.textures);
                    Debug.Log("model:colors:" + model.colors);

                    GameProfileCustomItem profileCustomItem = GameProfileCharacters.currentCustom;

                    AppColorPreset preset = AppColorPresets.Instance.GetByCode("game-default");

                    GameObject playerObject = item.Load();

                    if(playerObject != null) {
                        GameCustomController.SetMaterialColors(playerObject, profileCustomItem);
                    }

                    break;

                }
            }
            break;
        }
        
        DumpObj(name, "items.Count", items.Count);
    }
    
    public static void TestGameCharacters_Load() {
        
        string name = "TestGameCharacters_Load";
        
        Debug.Log(name);
        
        List<AppContentAssetModel> items = AppContentAssetModels.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetModel item in items) {            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:display_name:" + item.display_name);
            
            Debug.Log("item:json:" + item.ToJson());
            
            if(item.custom_materials != null) {         
                
                Debug.Log("item.data.custom_materials.Count:" + item.custom_materials.Count);
                
                foreach(AppContentAssetCustomItemProperty prop 
                        in item.custom_materials) {
                    
                    Debug.Log("prop:code:" + prop.code);  
                    Debug.Log("prop:name:" + prop.name); 
                    foreach(string type in prop.types) {
                        Debug.Log("prop:type:s:" + type);
                    }
                }
            }
            else {                
                Debug.Log("data was NULL" + item.ToJson());
            }
            
            AppContentAssetCustomItem customItem = item.GetCustomItems();
            
            Debug.Log("customItem:json:" + customItem.ToJson());
            
            if(customItem != null) {
                if(customItem.properties != null) {
                    foreach(AppContentAssetCustomItemProperty prop in customItem.properties) {
                        Debug.Log("prop:code:" + prop.code); 
                    }
                }
            }
            
            item.LoadModel();
            
            break;
        }
        
        DumpObj(name, "items.Count", items.Count);
    }

    //
    
    public static void TestAppContentAssetModels_Load() {
        
        string name = "TestAppContentAssetModels_Load";
        
        Debug.Log(name);

        List<AppContentAssetModel> items = AppContentAssetModels.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetModel item in items) {            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:display_name:" + item.display_name);
            
            Debug.Log("item:json:" + item.ToJson());
            
            if(item.custom_materials != null) {         
                
                Debug.Log("item.data.custom_materials.Count:" + item.custom_materials.Count);
                
                foreach(AppContentAssetCustomItemProperty prop 
                        in item.custom_materials) {
                    
                    Debug.Log("prop:code:" + prop.code);  
                    Debug.Log("prop:name:" + prop.name); 
                    foreach(string type in prop.types) {
                        Debug.Log("prop:type:s:" + type);
                    }
                }
            }
            else {                
                Debug.Log("data was NULL" + item.ToJson());
            }
            
            AppContentAssetCustomItem customItem = item.GetCustomItems();
            
            Debug.Log("customItem:json:" + customItem.ToJson());
            
            if(customItem != null) {
                if(customItem.properties != null) {
                    foreach(AppContentAssetCustomItemProperty prop in customItem.properties) {
                        Debug.Log("prop:code:" + prop.code); 
                    }
                }
            }

            item.LoadModel();

            break;
        }
        
        DumpObj(name, "items.Count", items.Count);
    }

    public static void TestAppContentAssetCustomItems_List() {
        
        string name = "TestAppContentAssetCustomItems_List";
        
        Debug.Log(name);
        
        List<AppContentAssetCustomItem> items = AppContentAssetCustomItems.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetCustomItem item in items) {  

            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:type:" + item.type);

            if(item.properties != null) {         
                
                Debug.Log("item.data.properties.Count:" + item.properties.Count);

                foreach(AppContentAssetCustomItemProperty prop 
                        in item.properties) {
                    
                    Debug.Log("prop:code:" + prop.code);  
                    foreach(string type in prop.types) {
                        Debug.Log("prop:type:s:" + type);
                    }
                }
            }
            else {                
                Debug.Log("data was NULL" + item.ToJson());
            }

        }
        
        DumpObj(name, "items.Count", items.Count);
    }

    //
    
    public static void TestAppContentAssetModels_List() {
        
        string name = "TestAppContentAssetModels_List";
        
        Debug.Log(name);
        
        List<AppContentAssetModel> items = AppContentAssetModels.Instance.GetAll();
        DumpObj(name, "items", items);
        
        //AssertEquals(name, username, "Player");
        
        foreach(AppContentAssetModel item in items) {            
            Debug.Log("item:code:" + item.code);         
            Debug.Log("item:display_name:" + item.display_name);
            
            Debug.Log("item:json:" + item.ToJson());

            if(item.custom_materials != null) {         
                
                Debug.Log("item.data.custom_materials.Count:" + item.custom_materials.Count);
                
                foreach(AppContentAssetCustomItemProperty prop 
                        in item.custom_materials) {
                    
                    Debug.Log("prop:code:" + prop.code);  
                    Debug.Log("prop:name:" + prop.name); 
                    foreach(string type in prop.types) {
                        Debug.Log("prop:type:s:" + type);
                    }
                }
            }
            else {                
                Debug.Log("data was NULL" + item.ToJson());
            }

            AppContentAssetCustomItem customItem = item.GetCustomItems();
            
            Debug.Log("customItem:json:" + customItem.ToJson());

            if(customItem != null) {
                if(customItem.properties != null) {
                    foreach(AppContentAssetCustomItemProperty prop in customItem.properties) {
                        Debug.Log("prop:code:" + prop.code); 
                    }
                }
            }
        }
        
        DumpObj(name, "items.Count", items.Count);
    }
    
    public static void TestAppColors_List() {
        
        string name = "TestAppColors_List";
        
        Debug.Log(name);
        
        List<AppColor> colors = AppColors.Instance.GetAll();

        foreach(AppColor color in colors) {
            Color colorTo = ColorHelper.FromRGB(color.color.rgba);
            
            Debug.Log("color:code:" + color.code);
            
            Debug.Log("color:color:" + colorTo);
        }
                
        DumpObj(name, "colors.Count", colors.Count);
    }

    
    
    public static void TestAppColors_Code() {
        
        string name = "TestAppColors_Code";
        
        Debug.Log(name);
        
        AppColor color = AppColors.Instance.GetByCode("game-ucf-knights-gold");

        if(color != null) {
        
            Debug.Log("color:color:" + color.code);
            Debug.Log("color:color:" + color.GetColor());
        }
        else {
            
            Debug.Log("color:NOT FOUND:");
        }


    }

    public static void TestGameState_LoadProfile() {
        
        string name = "TestGameState_LoadProfile";
        
        Debug.Log(name);

        GameState.LoadProfile();

        string username = GameProfiles.Current.username;
            DumpObj(name, "username", username);

        AssertEquals(name, username, "Player");
    }

    public static void TestGameState_SaveProfile() {
        
        string name = "TestGameState_SaveProfile";
        
        Debug.Log(name);
        
        GameState.SaveProfile();
        
        string username = GameProfiles.Current.username;
        DumpObj(name, "username", username);
        
        AssertEquals(name, username, "Player");
    }
    
    public static void TestGameProfileCharacter_GetCharacter() {
        
        string name = "TestGameProfileCharacter_GetCharacter";
        
        Debug.Log(name);

        string characterCode = "default";
                
        GameProfileCharacterItem characterItem = GameProfileCharacters.Current.GetCharacter(characterCode);


        if(characterItem == null) {
            
            DumpObj(name, "characterItem:NULL", characterItem);
        }
        else {
            
            DumpObj(name, "characterItem:EXISTS", characterItem);
            
            DumpObj(name, "characterItem:characterCode", characterItem.characterCode);
            DumpObj(name, "characterItem:characterCostumeCode", characterItem.characterCostumeCode);
            DumpObj(name, "characterItem:code", characterItem.code);

            DumpObj(name, "characterItem:characterCode.profileRPGItem.GetAttack()", 
                    characterItem.profileRPGItem.GetAttack());
        }

        DumpObj(name, "characterItem", characterItem);

        //Debug.Break();
    }
    
    public static void TestGameProfileCharacter_GetCurrentCharacter() {
        
        string name = "TestGameProfileCharacter_GetCurrentCharacter";
        
        Debug.Log(name);
        
        //string characterCode = "default";

        GameProfileCharacterItem item = GameProfileCharacters.Current.GetCurrentCharacter();

        item.characterCode = "testercode";
        DataAttribute d = new DataAttribute();
        d.code = "ddd";
        item.SetAttribute(d);

        
        DataAttribute a = new DataAttribute();
        a.code = "aaa";
        item.SetAttribute(a);
                
        if(item == null) {
            
            DumpObj(name, "item:NULL", item);
        }
        else {
            
            DumpObj(name, "item:EXISTS", item.ToJson());
            
            DumpObj(name, "item:characterCode", item.characterCode);
            DumpObj(name, "item:characterCostumeCode", item.characterCostumeCode);
            DumpObj(name, "item:code", item.code);
            
            //DumpObj(name, "characterItem:characterCode.profileCustomItem.code", 
            //        characterItem.profileCustomItem.code);
            //DumpObj(name, "characterItem:characterCode.profileRPGItem.GetAttack()", 
            //        characterItem.profileRPGItem.GetAttack());
        }
        
        DumpObj(name, "item", item);
        
        //Debug.Break();        
    }    
    
    public static void TestGameProfileCharacter_currentCharacter() {
        
        string name = "TestGameProfileCharacter_currentCharacter";
        
        Debug.Log(name);
        
        //string characterCode = "default";
        
        GameProfileCharacterItem characterItem = GameProfileCharacters.currentCharacter;
        
        
        if(characterItem == null) {
            
            DumpObj(name, "characterItem:NULL", characterItem);
        }
        else {
            
            DumpObj(name, "characterItem:EXISTS", characterItem);
            
            DumpObj(name, "characterItem:characterCode", characterItem.characterCode);
            DumpObj(name, "characterItem:characterCostumeCode", characterItem.characterCostumeCode);
            DumpObj(name, "characterItem:code", characterItem.code);
            
            //DumpObj(name, "characterItem:characterCode.profileCustomItem.code", 
            //        characterItem.profileCustomItem.code);
            //DumpObj(name, "characterItem:characterCode.profileRPGItem.GetAttack()", 
            //        characterItem.profileRPGItem.GetAttack());
        }
        
        DumpObj(name, "characterItem", characterItem);
        
        //Debug.Break();        
    }

    
    public static void TestGameProfileCharacter_currentProgress() {
        
        string name = "TestGameProfileCharacter_currentCharacter";
        
        Debug.Log(name);
        
        string characterCode = "default";
        
        GameProfilePlayerProgressItem item = GameProfileCharacters.currentProgress;
        
        
        if(item == null) {
            
            DumpObj(name, "item:NULL", item);
        }
        else {
            
            DumpObj(name, "item:EXISTS", item);

            //DumpObj(name, "characterItem:characterCode.profileCustomItem.code", 
            //        characterItem.profileCustomItem.code);
            //DumpObj(name, "characterItem:characterCode.profileRPGItem.GetAttack()", 
            //        characterItem.profileRPGItem.GetAttack());
        }
        
        DumpObj(name, "characterItem", item);
        
        //Debug.Break();
        
    }


    // -----------------------------------------------------------------
    // GAME CHARACTER SKIN

    public static void TestGameCharacterSkin() {

        string name = "TestGameCharacterSkin";
        
        Debug.Log(name);
        
        GameCharacterSkin obj1 = new GameCharacterSkin();
        GameCharacterSkin obj2 = new GameCharacterSkin();
        
        obj1.active = true;
        
        obj1.display_name = "tester";
        
        string obj1Data = JsonMapper.ToJson(obj1);
                
        obj2 = JsonMapper.ToObject<GameCharacterSkin>(obj1Data);
        
        string obj2Data = JsonMapper.ToJson(obj2);

        AssertEquals(name, obj1, obj2);
    }
    
    public static void TestGameCharacterSkinLoadData() {
        
        string name = "TestGameCharacterSkinLoadData";
        
        Debug.Log(name);

        try {
            GameCharacterSkins.Instance.LoadData();

            Debug.Log(name + ":GameCharacterSkins:" + GameCharacterSkins.Instance.items.Count);
            Debug.Log(name + ":SUCCESS:" + true);
        }
        catch(Exception e) {

            Debug.Log(e);
        }
    }







    /*
    
    public static void TestDefault() {
        
        DataKeyedObjectLeaf leaf = new DataKeyedObjectLeaf();
        
        leaf.active = true;
        
        leaf.display_name = "tester";
        
        Debug.Log("DataKeyedObjectLeaf:leaf:display_name:" + leaf.display_name);
        Debug.Log("DataKeyedObjectLeaf:leaf:display_name2:" + leaf.Get(BaseDataObjectKeys.display_name));
        
        string leafData = JsonMapper.ToJson(leaf);
        
        Debug.Log("DataKeyedObjectLeaf:leafData:" + leafData);
        
        DataKeyedObjectLeaf leaf2 = new DataKeyedObjectLeaf();
        
        leaf2 = JsonMapper.ToObject<DataKeyedObjectLeaf>(leafData);
        
        Debug.Log("DataKeyedObjectLeaf:display_name:" + leaf2.display_name);
        
        string leaf2Data = JsonMapper.ToJson(leaf2);
        
        Debug.Log("DataKeyedObjectLeaf:leaf2Data:" + leaf2Data);
        
        
        AssertEquals("DataKeyedObjectLeaf", leaf, leaf2);
    }
    */
    
}



